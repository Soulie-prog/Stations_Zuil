import csv
import psycopg2
import uuid
from datetime import datetime

# verbind met de database
connection_string = "dbname='stationszuil' user='postgres' password='Soulaim@n250' host='51.104.38.35' port='5432'"

conn = psycopg2.connect(connection_string)  # Verbinding maken met de database
cursor = conn.cursor()

# Invoer van de moderator
Naam_Moderator = input("Vul hier uw Moderator Naam: ")
Email_Moderator = input("Vul hier uw Moderator Email: ")
Datum_tijd = datetime.now()  # datum van de computer weer ophalen als in module 1

# open en leest het cs bestand
with (open('Check_Bericht.csv') as csvfile):
    bestand = csv.reader(csvfile)
    eerste_regel = next(bestand)
    Goedgekeurde_berichten = [] # maak een lege lijst aan

    for regel in bestand:
        if len(regel) == 4:
            Datum, Station, Naam, Bericht = regel  # Splits de regel in verschillende velden

            while True:
                check_bericht = input(
                    f"Dit is het bericht: {Bericht}\nWordt dit bericht goedgekeurd? (ja/nee) ").lower()

                if check_bericht == 'ja':
                    Goedkeurings_vraag = True
                    keuring = 'Goedgekeurd'
                    print("Bericht is goedgekeurd.")
                    break
                elif check_bericht == 'nee':
                    Goedkeurings_vraag = False
                    keuring = 'Afgekeurd'
                    print("Bericht is afgekeurd.")
                    break
                else:
                    print("Beantwoord alleen met 'ja' of 'nee'.")
                    continue  # Blijf vragen totdat een geldig antwoord is gegeven

            unieke_id_0 = str(uuid.uuid4())  # Genereer een unieke ID
            unieke_id_1 = str(uuid.uuid4())  # Genereer een andere unieke ID
            unieke_id_2 = str(uuid.uuid4())  # Genereer nog een unieke ID

            # Het lezen van stations uit een bestand
            with open('data.txt', 'r') as file:
                stations = file.read().splitlines()

            # Een dictionary maken om stationsnummers op te slaan
            station_numbers = {}

            cursor.execute(
                "INSERT INTO Moderator (nummer, Moderator_naam, Moderator_Email) VALUES (%s, %s, %s)",
                (unieke_id_1, Naam_Moderator, Email_Moderator))  # gegevens van tabel moderator worden nu bijgevoegd

            cursor.execute(
                "INSERT INTO Info_Bericht (nummer, locatie_station, naam_gebruiker, tijd, bericht) VALUES (%s, %s, %s, %s, %s)",
                (unieke_id_2, Station, Naam, Datum, Bericht))  # gegevens van tabel infobericht worden nu bijgevoegd

            cursor.execute(
                "INSERT INTO Goedkeuring_Check (nummer, bericht_check, keuring, tijd, moderator_id, infobericht_id) VALUES (%s, %s, %s, %s, %s, %s) RETURNING nummer",
                (unieke_id_0, Bericht, keuring, Datum_tijd, unieke_id_1, unieke_id_2))
            goedkeuring_id = cursor.fetchone()[0]  # gegevens van tabel goedkeuringscheck worden nu bijgevoegd

            cursor.execute(
                "UPDATE Info_Bericht SET goedkeuring_check_id = %s WHERE nummer = %s",
                (goedkeuring_id, unieke_id_2))  # Update de info zodat er bij een 1 op 1 relaties zichtbaar zijn bij elkaars tabellen

            conn.commit()  # Bevestig de transactie in de database

        else:
            Goedgekeurde_berichten.append(regel) # als iets niet lukt blijven de berichten nog in de csv file
    else:
        print("Er zijn op dit moment geen Berichten in het bestand")

# Schrijft de berichten terug naar het CSV-bestand
with open('Check_Bericht.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(eerste_regel)  # eerste regel van het CSV-bestand
    writer.writerows(Goedgekeurde_berichten)  # Schrijf de  berichten terug

# Sluit verbinding met de database
cursor.close()
conn.close()

conn.close()

